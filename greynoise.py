# Greynoise Python API
import requests
import logging
import json
import datetime
import re

# Establish Logging.
logging.basicConfig()
logger = logging.getLogger('greynoise')


class greyNoise():
    def __init__(
        self,
        api_key,
        base_url='https://enterprise.api.greynoise.io/v2/',
        prettyPrint=False
    ):
        """
        Greynoise Python Wrapper.  

        Available Functions
        - test_connect              Provides a method to test connectivity
        - quick_ip                  Check whether a given IP address is Internet background noise, or has been observed scanning or
                                    attacking devices across the Internet.
        - get_bulk                  Get all noise IPs from today generated by internet scanners, search engines, and worms
        - get_bulk_date             Get all noise IPs from on a given day generated by internet scanners, search engines, and worms.
                                    Date format is 2018-01-01 / YYYY-MM-DD. 
        - get_quick_ip              Check whether a given IP address is Internet background noise, or has been observed scanning or
                                    attacking devices across the Internet.
        - get_context_ip            Get more information about a given IP address. 
                                    Returns time ranges, IP metadata (network owner, ASN,reverse DNS pointer, country), associated actors, activity tags, 
                                    and raw port scan and web request information.
       
        Usage:
        s = greyNoise(api_key='yourapikey')

        s.function_name(valid_variables)
        """

        # Create Requests Session
        self.session = requests.session()
        # Add API Key to Header
        self.session.headers.update({'key': api_key})
        # Create Base URL variable to allow for updates in the future
        self.base_url = base_url
        # Create API Key variable to pass into each request
        self.api_key = api_key
        # Create Pretty Print variable
        self.prettyPrint = prettyPrint

        # Check to see if API Key is present
        if self.api_key is None:
            raise Exception("No API Key present")

        # Create endpoint
        endpoint = '{}meta/ping'.format(self.base_url)

        # Initiate Ping to GreyNoise
        self.ping = self.session.get(endpoint)

        # Request failed returning false and logging an error
        if self.ping.status_code != 200:
            logger.error(
                "Error connecting to Greynoise, error message: {}".format(
                    self.ping.text))

    def parse_output(self, input):
        # If prettyPrint set to False
        if self.prettyPrint is False:
            return json.dumps(input)
        # If prettyPrint set to True
        elif self.prettyPrint is True:
            print json.dumps(input, indent=4)

    def code_convert(self,code):
        return {
            "0x00": "The IP has never been observed scanning the Internet",
            "0x01": "The IP has been observed by the GreyNoise sensor network",
            "0x02": "The IP has been observed scanning the GreyNoise sensor network, but has not completed a full connection, meaning this can be spoofed",
            "0x03": "The IP is adjacent to another host that has been directly observed by the GreyNoise sensor network",
            "0x04": "Reserved",
            "0x05": "This IP is commonly spoofed in Internet-scan activity",
            "0x06": "This IP has been observed as noise, but this host belongs to a cloud provider where IPs can be cycled frequently"
        }[code]

    def test_connect(self):
        """
        Function:   Test ping to Grey Noise API

        No parameters: Relies on API key being set.  Returns True for successful connection and False for unsuccessful.

        Usage:
        s = greyNoise(api_key='yourapikey')
        s.test_connect()
        """

        endpoint = '{}meta/ping'.format(self.base_url)
        # Make connection to the ping endpoint
        r = self.session.get(endpoint)
        # Specify Output as JSON
        output = r.json()
        # If the request is successful
        if r.status_code == 200:
            return True
        # Request failed returning false and logging an error
        else:
            logger.warning(
                "test_connect:Error with query to GreyNoise, error message: {}".format(
                    output['message']))
            return False

    def get_bulk(self,offset=1000):
        """
        Function:   Get all noise IPs from today generated by internet scanners, search engines, and worms
        Notes
            - This results from this API endpoint are delivered in pages using an offset
            - The complete parameter willread true once allresults have been delivered
            - This API endpoint is real-time. Refresh it multiple times throughout the day to get the most
            up-to-date data
            - An IP delivered via this endpoint does not include a malicious or benign categorization

        Usage:
        s = greyNoise(api_key='yourapikey')
        s.get_bulk()
        """
        # URL that we are querying
        endpoint = '{}noise/bulk?offset={}'.format(self.base_url,offset)
        # Create a request
        r = self.session.get(endpoint)
        # Format the response in json
        output = r.json()
        # If the request is successful
        if r.status_code == 200:
            return self.parse_output(r.json())
        # Request failed returning false and logging an error
        else:
        # Write a warning to the console
            logger.warning(
                "get_bulk:Error with query to Greynoise, error message: {}".format(
                    output['message']))
            return False

    def get_bulk_date(self,date,offset=1000):
        """
        Function:   Get all noise IPs from on a given day generated by internet scanners, search engines, and worms.
                    Date format is 2018-01-01. 
        Notes
                - This results from this API endpoint are delivered in pages using an offset
                - An IP delivered via this endpoint does not include a malicious orbenign categorization
                - The complete parameter willread true once allresults have been delivered
                - Date format is YYYY-MM-DD

        Usage:
        s = greyNoise(api_key='yourapikey')
        s.get_bulk_date("2018-01-01")
        """
        try:
            datetime.datetime.strptime(date, "%Y-%m-%d")
        except ValueError:
            raise ValueError("Incorrect data format, should be YYYY-MM-DD")

        # URL that we are querying
        endpoint = '{}noise/bulk/{}?offset={}'.format(self.base_url, date,offset)
        # Create a request
        r = self.session.get(endpoint)
        # Format the response in json
        output = r.json()
        # If the request is successful
        if r.status_code == 200:
            return self.parse_output(r.json())
        # Request failed returning false and logging an error
        else:
        # Write a warning to the console
            logger.warning(
                "get_bulk_date:Error with query to Greynoise, error message: {}".format(
                    output['message']))
            return False

    def get_quick_ip(self,ip):
        """
        Function:   Check whether a given IP address is Internet background noise, or has been observed scanning or
                    attacking devices across the Internet.
        Notes
                    - This API endpoint is real-time
                    - This API endpoint contains a code which correlates to why GreyNoise labeled the IP as
                    noise
                    - An IP delivered via this endpoint does not include a malicious orbenign categorizations

        Usage:
        s = greyNoise(api_key='yourapikey')
        s.get_quick_ip('51.6.119.216')
        """
        regex_ipv4 = "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"

        if re.match(regex_ipv4, ip):
            ip = ip
        else:
            # Write a warning to the console
            logger.warning(
                "get_quick_ip:Error with IP format: Expected format 1.1.1.1, Received format: {}".format(ip))
            return False

        # URL that we are querying
        endpoint = '{}noise/quick/{}'.format(self.base_url,ip)
        # Create a request
        r = self.session.get(endpoint)
        # Format the response in json
        output = r.json()
        # If the request is successful
        if r.status_code == 200:
            # Add the code meaning variable to the json output
            output['code_meaning'] = self.code_convert(output['code'])
            return self.parse_output(output)
        # Request failed returning false and logging an error
        else:
        # Write a warning to the console
            logger.warning(
                "get_quick_ip:Error with query to Greynoise, error message: {}".format(
                    output['message']))
            return False


    def get_context_ip(self,ip):
        """
        Function:   Get more information about a given IP address. 
                    Returns time ranges, IP metadata (network owner, ASN,reverse DNS pointer, country), associated actors, activity tags, 
                    and raw port scan and web request information.
        Notes
            - This API endpoint is real-time.

        Usage:
        s = greyNoise(api_key='yourapikey')
        s.get_context_ip('51.6.119.216')
        """
        regex_ipv4 = "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"

        if re.match(regex_ipv4, ip):
            ip = ip
        else:
            # Write a warning to the console
            logger.warning(
                "get_context_ip:Error with IP format: Expected format 1.1.1.1, Received format: {}".format(ip))
            return False

        # URL that we are querying
        endpoint = '{}noise/context/{}'.format(self.base_url,ip)
        # Create a request
        r = self.session.get(endpoint)
        # Format the response in json
        output = r.json()
        # If the request is successful
        if r.status_code == 200:
            # Add the code meaning variable to the json output
            return self.parse_output(output)
        # Request failed returning false and logging an error
        else:
        # Write a warning to the console
            logger.warning(
                "get_context_ip:Error with query to Greynoise, error message: {}".format(
                    output['message']))
            return False


